---

---

<div class="flex items-center justify-end">
    <input class="hidden" type="checkbox" name="toggle" id="toggle" />
    <label
        class="relative mr-1 mt-1 block h-8 w-16 cursor-pointer overflow-hidden rounded-full bg-white/10"
        for="toggle"
    >
        <div
            class="thumb absolute left-0.5 top-0.5 size-7 overflow-hidden rounded-full bg-black transition-all duration-500 ease-in-out"
        >
            <div
                class="rotator relative flex h-full w-[200%] items-center transition duration-500 ease-in-out"
            >
                <div
                    class="left side flex size-full items-center justify-center transition duration-500 ease-in-out"
                >
                    <img class="size-5/6" src="/webp/moon.webp" />
                </div>
                <div
                    class="right side flex size-full items-center justify-center transition duration-500 ease-in-out"
                >
                    <img class="size-5/6" src="/webp/sun.webp" />
                </div>
            </div>
        </div>
    </label>
</div>

<style>
    #toggle:checked + label .thumb {
        left: calc(100% - 30px);
    }

    #toggle:checked + label .thumb .rotator {
        transform: translateX(-50%);
        background: rgb(235, 123, 91);
    }

    #toggle:checked + label .thumb .rotator .side {
        transform: rotate(180deg);
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const theme = (() => {
            if (
                typeof localStorage !== "undefined" &&
                localStorage.getItem("theme")
            ) {
                return localStorage.getItem("theme") || "light";
            }
            if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
                return "dark";
            }
            return "light";
        })();
        const toggle = document.getElementById("toggle") as HTMLInputElement;

        if (theme === "light") {
            document.documentElement.classList.remove("dark");
            if (toggle) {
                toggle.checked = true;
            }
        } else {
            document.documentElement.classList.add("dark");
        }

        window.localStorage.setItem("theme", theme);

        const handleToggleClick = () => {
            const element = document.documentElement;
            element.classList.toggle("dark");

            const isDark = element.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
        };

        document
            .getElementById("toggle")
            ?.addEventListener("change", handleToggleClick);
    });
    /*
        The astro:after-swap event is used in Astro to handle cases where the page updates or changes dynamically (e.g., through partial navigation or component swapping). This event ensures that the correct theme is applied even after these dynamic changes.
    */
    // document.addEventListener('astro:after-swap', () => {
    //     if (localStorage.theme === 'dark') {
    //         document.documentElement.classList.add('dark');
    //     }
    // });
</script>
