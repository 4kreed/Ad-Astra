---

---

<button id="search-button" class="-mt-3 size-16">
    <img class="" src="/webp/searcher.webp" alt="Ad-Astra logo" id="logo" />
</button>

<div
    id="search-modal"
    class="fixed inset-0 z-10 hidden items-center justify-center bg-black bg-opacity-95"
>
    <div
        class="relative flex w-4/6 flex-col rounded border-2 border-white p-8 shadow-lg"
        onClick={(e) => e.stopPropagation()}
    >
        <button
            id="close-modal"
            class="absolute right-4 top-1 text-3xl font-bold text-white"
            onClick={() => toggleModal()}
        >
            &times;
        </button>
        <input
            id="search-input"
            type="search"
            placeholder="Enter a search term..."
            required
            min="2"
            class="mx-auto flex h-16 w-3/5 rounded border bg-transparent p-4 text-white"
        />
        <ul
            id="search-results"
            class="mx-auto mt-8 flex w-4/5 flex-wrap items-center justify-evenly gap-x-5 gap-y-10 font-404 text-white"
        >
        </ul>
    </div>
</div>
<script>
    import DomPurify from "dompurify";
    import Fuse from "fuse.js";

    let SEARCH_DATA;
    let FUSE_INSTANCE;
    // TODO: Tune this options
    const FUSE_OPTIONS = {
        includeScore: true,
        shouldSort: true,
        threshold: 0.5,
        keys: [
            {
                name: "title",
                weight: 1,
            },

            {
                name: "slug",
                weight: 0.75,
            },
            {
                name: "description",
                weight: 0.5,
            },
            {
                name: "content",
                weight: 0.25,
            },
        ],
    };

    const searchResults = document.getElementById("search-results");

    function displayResults(searchResult) {
        return searchResult
            .map((result) => {
                const {
                    title,
                    slug,
                    description,
                    tags,
                    pubDate,
                    updatedDate,
                    image,
                } = result.item;
                return `
                <li>
                    <a
                        href="/posts/${slug}"
                        class="flex flex-col gap-4 rounded-lg border-2 border-indigo-400/80 p-2 shadow-md hover:border-indigo-300 hover:font-bold"
                    >
                        <div class="mx-auto flex w-full [&>img]:aspect-video [&>img]:rounded-lg">
                            <img src="${image ? image : "/webp/hero-image.webp"}" />
                        </div>
                        <div class="flex flex-grow flex-col gap-2 text-pretty">
                            <div class="flex w-fit flex-wrap gap-2">
                                ${tags
                                    .map(
                                        (tag) => `
                                    <span class="rounded-lg bg-indigo-400/80 px-2 py-1 text-[color:var(--background-color)]">
                                        ${tag}
                                    </span>`,
                                    )
                                    .join("")}
                            </div>
                            <h2 class="text-3xl">
                                ${title}
                            </h2>
                            <p class="text-sm text-gray-200">${description}</p>
                            <p class="text-xs text-gray-400">
                                Published on ${new Date(pubDate).toLocaleDateString()}
                            </p>
                            ${
                                updatedDate
                                    ? `
                                <p class="text-xs text-gray-400">
                                    Updated on ${new Date(updatedDate).toLocaleDateString()}
                                </p>`
                                    : ""
                            }
                        </div>
                    </a>
                </li>`;
            })
            .join("");
    }

    async function fetchSearchResults(search) {
        if (search.length === 0) {
            searchResults.innerHTML = "";
            return;
        }
        if (!SEARCH_DATA) {
            try {
                const res = await fetch("/posts.json");
                if (!res.ok) {
                    throw new Error("Something went wrong…please try again");
                }
                const data = await res.json();
                SEARCH_DATA = data;
            } catch (e) {
                console.error(e);
            }
        }
        if (SEARCH_DATA && !FUSE_INSTANCE) {
            FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
        }
        if (!FUSE_INSTANCE) {
            return;
        }
        const searchResult = FUSE_INSTANCE.search(search);
        searchResults.innerHTML =
            searchResult.length > 0
                ? displayResults(searchResult)
                : "No results found…";
    }

    document.addEventListener("DOMContentLoaded", () => {
        const searchButton = document.getElementById("search-button");
        const searchModal = document.getElementById("search-modal");
        const searchInput = document.getElementById("search-input");
        const closeModalButton = document.getElementById("close-modal");

        let isOpen = false;

        const toggleModal = () => {
            isOpen = !isOpen;
            searchModal?.classList.toggle("hidden");
            searchModal?.classList.toggle("flex");
            if (isOpen) {
                searchInput?.focus();
            } else {
                searchInput.value = "";
            }
            searchResults.innerHTML = "";
        };

        const handleClose = (event) => {
            if (event.key === "Escape" || event.target === searchModal) {
                toggleModal();
            }
        };

        const handleOnSearch = (event) => {
            const searchTerm = DomPurify.sanitize(event.target.value);
            fetchSearchResults(searchTerm);
        };

        searchButton?.addEventListener("click", toggleModal);
        searchInput?.addEventListener("input", handleOnSearch);
        searchModal?.addEventListener("click", handleClose);
        window.addEventListener("keydown", handleClose);
        closeModalButton?.addEventListener("click", toggleModal);
    });
</script>
